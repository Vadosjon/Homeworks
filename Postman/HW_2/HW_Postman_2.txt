                                                                // HW_2 Postman
// http://162.55.220.72:5005/first
// 1. Отправить запрос.
// 2. Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 3. Проверить, что в body приходит правильный string.




// =====================================================================================================================================================
// http://162.55.220.72:5005/user_info_3
// 1. Отправить запрос.
// 2. Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 3. Спарсить response body в json.

        var Resp = pm.response.json();

// 4. Проверить, что name в ответе равно name s request (name вбить руками.)

        pm.test("Check_the_name", function () {
            pm.expect(Resp.name).to.eql("Vadim"); - как видишь имя вбито вручную. Не чз параметр
        });

// 5. Проверить, что age в ответе равно age s request (age вбить руками.)

        pm.test("Check_the_age", function () {
            pm.expect(Resp.age).to.eql("27");
        });

// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

        pm.test("Check_the_salary", function () {
            pm.expect(Resp.salary).to.eql(1000);
        });

// 7. Спарсить request.

        var req_Body = request.data 

// 8. Проверить, что name в ответе равно name s request (name забрать из request.)

        pm.test("Check_params_name", function () {
            pm.expect(Resp.name).to.eql(req_Body.name);
        });

// 9. Проверить, что age в ответе равно age s request (age забрать из request.)

        pm.test("Check_params_age", function () {
            pm.expect(Resp.age).to.eql(req_Body.age);
        });

// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

        pm.test("Check_params_Salary", function () {
            pm.expect(Resp.salary).to.eql(+req_Body.salary);
        });

// 11. Вывести в консоль параметр family из response.

        console.log(Resp.family);

// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

        pm.test("Check_params_Salary_*_4", function () {
            pm.expect(Resp.family.u_salary_1_5_year).to.eql(req_Body.salary * 4);
        });





// =====================================================================================================================================================
// http://162.55.220.72:5005/object_info_3
// 1. Отправить запрос.
// 2. Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 3. Спарсить response body в json.

        var Resp = pm.response.json();

// 4. Спарсить request.

        var req_url = pm.request.url.query.toObject();

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)

        pm.test("check_u_name", function () {
            pm.expect(Resp.name).to.eql(req_url.name);
        });

// 6. Проверить, что age в ответе равно age s request (age забрать из request.)

        pm.test("check_u_age", function () {
            pm.expect(Resp.age).to.eql(req_url.age);
        });

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

        pm.test("check_u_salary", function () {
            pm.expect(Resp.salary).to.eql(+req_url.salary);
        });

// 8. Вывести в консоль параметр family из response.

        console.log(Resp.family);

// 9. Проверить, что у параметра dog есть параметры name.

        pm.test("Check if dog has name", function () {
            pm.expect(Resp.family.pets.dog).to.have.property('name');
        });

// 10. Проверить, что у параметра dog есть параметры age.

        pm.test("Check if dog has name", function () {
            pm.expect(Resp.family.pets.dog).to.have.property('name');
        });

// 11. Проверить, что параметр name имеет значение Luky.

        pm.test("Check if name has Luky", function () {
            pm.expect(Resp.family.pets.dog.name).to.eql("Luky");
        });

// 12. Проверить, что параметр age имеет значение 4.

pm.test("check_docs_age_as_4", function () {
    pm.expect(Resp.family.pets.dog.age).to.eql(4);
});





// =====================================================================================================================================================
// http://162.55.220.72:5005/object_info_4
// 1. Отправить запрос.
// 2. Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 3. Спарсить response body в json.

        var jsonData = pm.response.json()

// 4. Спарсить request.

        var req_url = pm.request.url.query.toObject();

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)

        pm.test("Your test name", function () {
            pm.expect(jsonData.name).to.eql(req_url.name)
        });

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)

        pm.test("Your test age", function () {
            pm.expect(jsonData.age).to.eql(+req_url.age);
        });

// 7. Вывести в консоль параметр salary из request.

        console.log("Your salary = " + req_url.salary)

// 8. Вывести в консоль параметр salary из response.

        console.log(jsonData.salary)

// 9. Вывести в консоль 0-й элемент параметра salary из response.

        console.log(jsonData.salary[0])

// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

        console.log(jsonData.salary[1])

// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

        console.log(jsonData.salary[2])

// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

        pm.test("Salary_0", function () {
            pm.expect(jsonData.salary[0]).to.eql(+req_url.salary);
        });

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

        pm.test("Salary_1", function () {
            pm.expect(Number(jsonData.salary[1])).to.eql(req_url.salary*2);
        });

// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

        pm.test("Salary_2", function () {
            pm.expect(Number(jsonData.salary[2])).to.eql(req_url.salary*3);
        });

// 15. Создать в окружении переменную name
// 16. Создать в окружении переменную age
// 17. Создать в окружении переменную salary
// 18. Передать в окружение переменную name

        pm.environment.set("name", jsonData.name);

// 19. Передать в окружение переменную age

        pm.environment.set("age", jsonData.age);

// 20. Передать в окружение переменную salary

        pm.environment.set("salary", jsonData.salary);

// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

        for (var i = 0; i < jsonData.salary.length; i++){
            console.log(jsonData.salary[i])
        })





// =======================================================================================================================
// http://162.55.220.72:5005/user_info_2
// 1. Вставить параметр salary из окружения в request
// 2. Вставить параметр age из окружения в age
// 3. Вставить параметр name из окружения в name
// 4. Отправить запрос.
// 5. Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 6. Спарсить response body в json.

        var jsonData = pm.response.json();

// 7. Спарсить request.

var Req = request.data

// 8. Проверить, что json response имеет параметр start_qa_salary

        pm.test("Check_resp_has_start_qa_salary", function () {
            pm.expect(jsonData).to.have.property('start_qa_salary')
        });

// 9. Проверить, что json response имеет параметр qa_salary_after_6_months

        pm.test("Check_resp_has_start_qa_salary", function () {
            pm.expect(jsonData).to.have.property('qa_salary_after_6_months')
        });

// 10. Проверить, что json response имеет параметр qa_salary_after_12_months

        pm.test("Check_resp_has_start_qa_salary", function () {
            pm.expect(jsonData).to.have.property('qa_salary_after_12_months')
        });

// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year

        pm.test("Check_resp_has_start_qa_salary", function () {
            pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')
        });

// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years

        pm.test("Check_resp_has_qa_salary_after_3.5_years", function () {
            pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')
        });

// 13. Проверить, что json response имеет параметр person

        pm.test("Check_resp_has_preson", function () {
            pm.expect(jsonData).to.have.property('person')
        });

// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)

        pm.test("Check_resp_has_person", function () {
            pm.expect(jsonData.start_qa_salary).to.eql(+Req.salary)
        });

// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)

        pm.test("Check_resp_has_person", function () {
            pm.expect(jsonData.qa_salary_after_6_months).to.eql(Req.salary*2)
        });

// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)

        pm.test("Check_resp_has_person", function () {
            pm.expect(jsonData.qa_salary_after_12_months).to.eql(Req.salary*2.7)
        });

// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)

        pm.test("Check_resp_has_person", function () {
            pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(Req.salary*3.3)
        });

// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)

        pm.test("Check_resp_has_person", function () {
            pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(Req.salary*3.8)
        });

// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)

        pm.test("Check_resp_has_person", function () {
            pm.expect(jsonData.person.u_name[1]).to.eql(+Req.salary)
        });

// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)

        pm.test("qa_salary_after_3.5_years", function () {
            pm.expect(jsonData.person.u_age).to.eql(+Req.age)
        });

// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)

        pm.test("u_salary_5_years", function () {
            pm.expect(jsonData.person.u_salary_5_years).to.eql(Req.salary*4.2)
        });

// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

        var person = jsonData.person;
        for (var key in person) {
            if (person.hasOwnProperty(key)) {
                console.log("Key: " + key + ", Value: " + person[key])
            }
        };

