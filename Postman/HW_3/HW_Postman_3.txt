// ДЗ_3 Postman
// ========================================================================================================================

// 1) необходимо залогиниться
// POST
// http://162.55.220.72:5005/login
// login : str (кроме /)
// password : str

// Приходящий токен необходимо передать во все остальные запросы.

// ===================
// дальше все запросы требуют наличие токена.
// ===================

// 2) http://162.55.220.72:5005/user_info
// req. (RAW JSON)
// POST
// age: int
// salary: int
// name: str
// auth_token


// resp.
// {'start_qa_salary':salary,
//  'qa_salary_after_6_months': salary * 2,
//  'qa_salary_after_12_months': salary * 2.9,
//  'person': {'u_name':[user_name, salary, age],
//                                 'u_age':age,
//                                 'u_salary_1.5_year': salary * 4}
//                                 }

// Тесты:
// 1) Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 2) Проверка структуры json в ответе.

        var jsonData = pm.response.json();
        var schema = {
            "type": "object",
            "properties": {
                "person": {
                    "type": "object",
                    "properties": {
                        "u_age": { "type": "integer" },
                        "u_name": {
                            "type": "array",
                            "items": [
                                { "type": "string" },
                                { "type": "integer" },
                                { "type": "integer" }
                            ],
                            "minItems": 3,
                            "maxItems": 3
                        },
                        "u_salary_1_5_year": { "type": "integer" }
                    },
                    "required": ["u_age", "u_name", "u_salary_1_5_year"]
                },
                "qa_salary_after_12_months": { "type": "number" },
                "qa_salary_after_6_months": { "type": "integer" },
                "start_qa_salary": { "type": "integer" }
            },
            "required": ["person", "qa_salary_after_12_months", "qa_salary_after_6_months", "start_qa_salary"]
        };

        
        pm.test('Структура соответствует схеме', function() {
            pm.expect(tv4.validate(jsonData, schema)).to.be.true;
        });


// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.

        var baseSalary = jsonData.person.u_name[1];

        pm.test("Проверка начальной зарплаты", function() {
            pm.expect(jsonData.start_qa_salary).to.eql(baseSalary);
        });

        pm.test("Проверка зарплаты после 6 месяцев", function() {
            var expectedSalaryAfter6Months = baseSalary * 2;
            pm.expect(jsonData.qa_salary_after_6_months).to.eql(expectedSalaryAfter6Months);
        });

        pm.test("Проверка зарплаты после 12 месяцев", function() {
            var expectedSalaryAfter12Months = baseSalary * 2.9;
            pm.expect(jsonData.qa_salary_after_12_months).to.eql(expectedSalaryAfter12Months);
        });

        pm.test("Проверка зарплаты 1,5 года", function() {
            var expectedSalary1_5Year = baseSalary * 4;
            pm.expect(jsonData.person.u_salary_1_5_year).to.eql(expectedSalary1_5Year);
        });

// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user

        pm.environment.set("salary", jsonData.person.u_salary_1_5_year);






// ========================================================================================================================================================

// 3) http://162.55.220.72:5005/new_data
// req.
// POST
// age: int
// salary: int
// name: str
// auth_token

// Resp.
// {'name':name,
//   'age': int(age),
//   'salary': [salary, str(salary*2), str(salary*3)]}

// Тесты:
// 1) Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 2) Проверка структуры json в ответе.

        var jsonData = pm.response.json();

        var schema = {
            "type": "object",
            "properties": {
                "age": {"type": "integer"},
                "name": {"type": "string"},
                "salary": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {"type": "number"},
                            {"type": "string"}
                        ]
                    },
                    "maxItems": 3,
                    "minItems": 3
                }
            },
            "required": ["age", "name", "salary"]
        }

        pm.test('Структура соответствует схеме', function() {
            pm.expect(tv4.validate(jsonData, schema)).to.be.true;
        });

// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.

        var Req = request.jsondata
        var BaseSalary = jsonData.salary[0]
        pm.test ("Проверка_перемножения_1", function(){
            var ExpectedSalary = BaseSalary * 2;
            pm.expect(ExpectedSalary).to.eql(+jsonData.salary[1]); 
        })

        pm.test ("Проверка_перемножения_2", function(){
            var ExpectedSalary = BaseSalary * 3;
            pm.expect(ExpectedSalary).to.eql(+jsonData.salary[2]); 
        })

// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го

        pm.test ("Check_salary_3_>_2_and_1", function(){
            pm.expect(Number(jsonData.salary[2])).to.be.above(Number(jsonData.salary[1])).and.above(Number(jsonData.salary[0]));
        })








// ===========================================================================================================================================================================

// 4) http://162.55.220.72:5005/test_pet_info
// req.
// POST
// age: int
// weight: int
// name: str
// auth_token


// Resp.
// {'name': name,
//  'age': age,
//  'daily_food':weight * 0.012,
//  'daily_sleep': weight * 2.5}


// Тесты:
// 1) Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

// 2) Проверка структуры json в ответе.

        var Resp = pm.response.json();
        schema = {
            "type": "object",
            "properties": {
                "age": {"type": "integer"},
                "daily_food": {"type": "number"},
                "daily_sleep": {"type": "number"},
                "name": {"type": "string"}    
            },
            "required": ["age", "daily_food", "daily_sleep", "name"]
        }

        pm.test('Структура соответствует схеме', function() {
            pm.expect(tv4.validate(Resp, schema)).to.be.true;
        });

// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.

        var Req = request.data

        pm.test("Проверка_перемножения_коэф_1", function(){
            pm.expect(Resp.daily_food).to.eql(Req.weight * 0.012);
        });

        pm.test("Проверка_перемножения_коэф_2", function(){
            pm.expect(Resp.daily_sleep).to.eql(Req.weight * 2.5);
        });








// ========================================================================================================================================================v===================

// 5) http://162.55.220.72:5005/get_test_user
// req.
// POST
// age: int
// salary: int
// name: str
// auth_token

// Resp.
// {'name': name,
//  'age':age,
//  'salary': salary,
//  'family':{'children':[['Alex', 24],['Kate', 12]],
//  'u_salary_1.5_year': salary * 4}
//   }

// Тесты:
// 1) Статус код 200

        pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });


// 2) Проверка структуры json в ответе.

        var tv4 = require('tv4');
        var Resp = pm.response.json();
        schema = {
            "type": "object",
            "properties": {
                "age": {"type": "string"}, // возраст представлен как строка
                "name": {"type": "string"},
                "salary": {"type": "integer"},
                "family": {
                    "type": "object",
                    "properties": {
                        "children": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": [
                                    {"type": "string"},
                                    {"type": "integer"}
                                ],
                                "maxItems": 2,
                                "minItems": 2
                            }
                        },
                        "u_salary_1_5_year": {"type": "integer"} // имя свойства изменено
                    },
                    "required": ["children", "u_salary_1_5_year"]
                }
            },
            "required": ["age", "name", "salary", "family"]
        }

        var result = tv4.validateMultiple(Resp, schema);
        pm.test('Структура соответствует схеме', function() {
            pm.expect(result.valid, JSON.stringify(result.errors)).to.be.true;
        });

// 3) Проверить что занчение поля name = значению переменной name из окружения

        pm.test("Проверка значения поля name", function(){
            var responseName = pm.response.json().name;
            var environmentName = pm.environment.get("name");
            pm.expect(responseName).to.eql(environmentName);
        });

// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age

        var reqBody = request.data
        pm.test("Проверка_age_response_равно_age_request", function(){
            pm.expect(reqBody.name).to.eql(Resp.name)
        })


